WRAPPER CLASSES

package com.lti.training.day5.wrapperclasses;

public class WrapperClassesExample {
public static void main(String[] args) {
	
	int x=10;
	Integer y=20;                                    //AUTOBOXING
	//the above line is equivalent to
	Integer z=new Integer(30); //
	
	//primitive types are mutable
	int a=10;
	System.out.println(a);
	a=20;
	System.out.println(a);
	
	//wrapper classes
 Integer b=10;  // new object is created
 System.out.println(b);
 b=20;// new object is created again
 System.out.println(b);
}

//a scenario where we need to store null
//int c=null;
Integer d=null;

//some places in java primitive types are not supported 
// Eg: Collections like ArrayList,LinkedList and others
//then we end up using Wrapper classes instead of primitives

//apart from this common use of wrapper class is TYPE CONVERSION

//Converting int to Integer
Integer e=10;

//Converting Integer to int
int f=e; //e.intValue();

Integer g1=new Integer("100");
//Converting Integer to String
String h=g1.toString();

//converting String to int
int i=Integer.parseInt("100");

//converting int to String
String g=Integer.toString(100);

//TODO:try this--> int->String->float->Double->Integer

int s=20;
String s1=Integer.toString(s);

float f1=Float.parseFloat(s1);
Double d1=new Double(f1);
Integer i1=(int)Double.parseDouble(String.valueOf(d1));

}
______________________________
EXCEPTION HANDLING

package com.lti.training.day5.exceptionhanding;

public class BankAccount {
	
	private int acno;
	private String name;
	private double balance;
	
	public BankAccount(int acno, String name, double balance) {
		super();
		this.acno = acno;
		this.name = name;
		this.balance = balance;
	}
	
	public double withdraw(double amount) throws Exception{
		if(amount>balance)

	{
			Exception e=new Exception("Insufficient balance!");
			throw e;
	}
		else {
			balance-=amount;
			return balance;
			
	}
	}
	public static void main(String[] args) {
		BankAccount bankAcc =new BankAccount(1001,"Annu",5000);
		try {
			double balance=bankAcc.withdraw(6000);
			System.out.println("balance left"+balance);
			
		}
	catch(Exception e) {
		System.out.println(e.getMessage());
		//e.printStackTrace();
	}
	}
	}

__________________________________________________
 runtimeexceptionsa

package com.lti.training.day5.exceptionhanding;

public class BankAccount {
	
	private int acno;
	private String name;
	private double balance;
	
	public BankAccount(int acno, String name, double balance) {
		super();
		this.acno = acno;
		this.name = name;
		this.balance = balance;
	}
	
	public double withdraw(double amount) throws RuntimeException {
		if(amount>balance)

	{
			Error e=new Error("Insufficient balance!");
			throw e;
	}
		else {
			balance-=amount;
			return balance;
			
	}
	}
	public static void main(String[] args) {
		BankAccount bankAcc =new BankAccount(1001,"Annu",5000);
		/*try {
			double balance=bankAcc.withdraw(6000);
			System.out.println("balance left"+balance);
			
		}
	catch(Error e) {
		System.out.println(e.getMessage());
		//e.printStackTrace();
	}
	}*/
	}

}
_________________________________

USER DEFINED EXCEPTION

BankAccount.java

package com.lti.training.day5.exceptionhanding;

public class BankAccount {
	
	private int acno;
	private String name;
	private double balance;
	
	public BankAccount(int acno, String name, double balance) {
		super();
		this.acno = acno;
		this.name = name;
		this.balance = balance;
	}
	
	public double withdraw(double amount) throws AccountException {
		if(amount>balance)

	{
			AccountException e=new AccountException("Insufficient balance!");
			throw e;
	}
		else {
			balance-=amount;
			return balance;
			
	}
	}
	public static void main(String[] args) {
		BankAccount bankAcc =new BankAccount(1001,"Annu",5000);
		try {
			double balance=bankAcc.withdraw(6000);
			System.out.println("balance left"+balance);
			
		}
	catch(AccountException e) {
		System.out.println(e.getMessage());
		//e.printStackTrace();
	}
	}
	}


-------------------
AccountException.java

package com.lti.training.day5.exceptionhanding;

public class AccountException extends Exception {
public AccountException(String msg)
{
	super(msg);
}
	

}
____________________


collections with LIST

EmployeeOnList.java

package com.lti.training.day5.collections;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import com.lti.training.day3.objectclass.Person;

public class EmployeeOnList {

	public static void main(String[] args) {
		// <> angular brases is called Generics in java

		List<String> list1 = new ArrayList<>();
		list1.add("Java");
		list1.add("oracle");
		list1.add(".Net");
		list1.add("PHP");
		list1.add("Java");
		list1.add(1,  "php");  // add index and insert it
		
		// list1.add(1000);

		List<String> list3 = new ArrayList<>();
		list3.add("c");
		list3.add("c++");
		list3.add("SAP");
		list3.add("DAA");
		list1.addAll(list3);       //adding two lists in one list
		
		// different ways of iterating over the list, which will give same result for
		// all
		System.out.println("option 1: old fashioned for loop");
		for (int i = 0; i < list1.size(); i++)
			System.out.println(list1.get(i));

		System.out.println("option 2: using  for-each  loop"); //
		for (String str : list1)
			System.out.println(str);
		System.out.println("option 3 : Java8 Lambda style for_each"); //
		list1.forEach(str -> System.out.println(str));

		System.out.println("option 4: traditonal iterator");
		Iterator<String> itr = list1.iterator();
		while (itr.hasNext())
			System.out.println(itr.next());

		List<Person> list2 = new ArrayList<>();

		list2.add(new Person("abi", 67));
		list2.add(new Person("nu", 90));
		list2.add(new Person("anu", 94));
		list2.add(new Person("shw", 99));

		for (Person p : list2)
			System.out.println(p);
		
		

	}

}
_______________________________________________________
UserService.java

map(key,value)

package com.lti.training.day5.collections;


import java.util.HashMap;

import java.util.Map;

public class UserService {
	
	private Map<String,String>  users;
	                UserService()  {
                    users=new HashMap<>();
                    users.put("annu", "531");
                    users.put("abi", "981");
                    users.put("shths", "51");
                    
}
    
    public boolean isValidUser(String username,String password)  {
    	
    	  if(users.containsKey(username))
    	  {
    		  String pwd=users.get(username);
    	      if(pwd.equals(password))
    	    	  return true;
                
    }
     return false;
    }
    public static void main(String[] args)     {
           UserManager userManager= new UserManager();
           boolean isValid= userManager.isValidUser("annu", "531");
           System.out.println(isValid);
}
    
}
............................
User.java

package com.lti.training.day5.collections;

public class User {
	
	private String username;
	private String userpassword;
	
	public User() {
		// TODO Auto-generated constructor stub
	}
	
	public User(String username, String userpassword) {
		super();
		this.username = username;
		this.userpassword = userpassword;
	}

	
	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getUserpassword() {
		return userpassword;
	}

	public void setUserpassword(String userpassword) {
		this.userpassword = userpassword;
	}

	


	

}

------------------
UserManager.java

package com.lti.training.day5.collections;

import java.util.ArrayList;
import java.util.List;

public class UserManager {
	
	private List<User>  users; 
	
    public UserManager()  {
                    users=new ArrayList<User>();
                    users.add(new  User("ann", "501"));
                    users.add(new  User("abi", "981"));
                    users.add(new  User("shths", "51"));
                    
}
    
    public boolean isValidUser(String username,String password)  {
                for(User user:users) {
                	if(user.getUsername().equals(username)
                			&& user.getUserpassword().equals(password))
                		             return true;
                }
    	       return false;
    	
    }
    
    public static void main(String[] args)     {
           UserManager userManager= new UserManager();
           boolean isValid= userManager.isValidUser("annu", "531");
           System.out.println(isValid);
}
    
}
____________________________________________

